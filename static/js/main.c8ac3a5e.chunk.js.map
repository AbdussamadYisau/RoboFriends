{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","style","width","backgroundColor","src","alt","card-body","card-title","card-text","CardList","robots","cardArray","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","toLowerCase","includes","length","marginTop","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0RAiBeA,G,MAdF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,KAAKC,EAAc,EAAdA,MAAMC,EAAQ,EAARA,GAClB,OACI,yBAAKC,UAAW,kCAAkCC,MAAS,CAACC,MAAO,QAASC,gBAAiB,eACzF,yBAAKC,IAAG,+BAA4BL,EAA5B,YAA0CC,UAAY,eAAeK,IAAM,iBACnF,yBAAKC,YAAY,QACb,wBAAIC,aAAa,QAAQV,GACzB,uBAAGW,YAAY,QAAQV,OCO5BW,EAXE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACLC,EAAYD,EAAOE,KAAI,SAACC,EAAMC,GAChC,OAAO,kBAAC,EAAD,CAAMC,IAAOD,EAAGf,GAAMW,EAAOI,GAAGf,GAAIF,KAAMa,EAAOI,GAAGjB,KAAMC,MAAOY,EAAOI,GAAGhB,WAEtF,OACI,yBAAKE,UAAY,2CACbW,ICQDK,EAhBG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACI,yBAAKlB,UAAU,OACX,2BACIA,UAAU,wBACVmB,KAAO,SACPC,YAAY,gBACZnB,MAAO,CAACE,gBAAgB,aACxBkB,SAAUH,MCkCXI,G,wDAvCX,aAAe,IAAD,8BACV,gBAaJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAACR,YAAaO,EAAME,OAAOC,SAbzC,EAAKC,MAAQ,CACTlB,OAAO,GACPO,YAAY,IAJN,E,gEAQO,IAAD,OAChBY,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAU,EAAKR,SAAS,CAAEf,OAAQuB,S,+BAOrC,IAAD,OAEEC,EAAiBC,KAAKP,MAAMlB,OAAO0B,QAAO,SAAA1B,GAC5C,OAAOA,EAAOb,KAAKwC,cAAcC,SAAS,EAAKV,MAAMX,YAAYoB,kBAErE,OAAiC,IAA7BF,KAAKP,MAAMlB,OAAO6B,OACX,uCAKH,yBAAKvC,UAAU,eACX,wBAAIC,MAAS,CAACuC,UAAU,SAAxB,eACA,kBAAC,EAAD,CAAWtB,aAAgBiB,KAAKZ,iBAChC,kBAAC,EAAD,CAAUb,OAAQwB,S,GAjCpBO,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCRNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c8ac3a5e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css';\r\n\r\nconst Card = ({name,email,id}) => {\r\n        return(\r\n            <div className= \"m-2 p-1 card shadow text-center\" style = {{width: '18rem', backgroundColor: 'lightgreen' }}>\r\n                <img src = {`https://robohash.org/${id}?200x200`} className = \"card-img-top\" alt = \"robotPicture\"/>\r\n                <div card-body = \"true\">\r\n                    <h2 card-title = \"true\">{name}</h2>\r\n                    <p card-text = \"true\">{email}</p>\r\n                </div>\r\n            </div>\r\n\r\n\r\n        );\r\n }\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\n\r\nconst CardList = ({robots}) => {\r\n        const cardArray = robots.map((user, i) => {\r\n            return <Card key = {i} id = {robots[i].id} name={robots[i].name} email={robots[i].email}/>\r\n        });\r\n        return(\r\n            <div className = \"d-flex flex-wrap justify-content-center\">\r\n               {cardArray}\r\n            </div>\r\n        );\r\n}\r\n\r\nexport default CardList","import React from 'react';\r\n\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n    return(\r\n        <div className=\"p-2\">\r\n            <input\r\n                className=\"border border-success\"\r\n                type = \"search\"\r\n                placeholder=\"search robots\"\r\n                style={{backgroundColor:'lightblue'}}\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default SearchBox;","import React, {Component} from 'react';\r\nimport CardList from './CardList';\r\nimport SearchBox from './SearchBox';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            robots:[],\r\n            searchfield:''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n          .then(response=> response.json())\r\n          .then(users => {this.setState({ robots: users})});\r\n      }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({searchfield: event.target.value})\r\n    }\r\n    \r\n    render(){\r\n    \r\n        const filteredRobots = this.state.robots.filter(robots => {\r\n            return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\r\n        })\r\n        if (this.state.robots.length === 0) {\r\n            return <h1>Loading</h1>\r\n        }\r\n\r\n        else {\r\n            return(\r\n                <div className=\"text-center\">\r\n                    <h1 style = {{marginTop:'10px'}}>RoboFriends</h1>\r\n                    <SearchBox searchChange = {this.onSearchChange}/>\r\n                    <CardList robots={filteredRobots}/>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}